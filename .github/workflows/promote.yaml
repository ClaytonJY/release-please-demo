name: Promote Artifacts

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - .release-please-manifest.json  # only release PRs

permissions:
  contents: read
  packages: write

jobs:

  identify-builds:
    name: Extract versions to promote from staging manifest
    # small risk of race condition here!
    # if release PR merges at same time as a non-release PR merges,
    # thus opening a new release PR and updating staging,
    # this job could read the newer manifest on staging rather than the one from the merged release PR
    # unlikely since checkout should be faster than creating a release PR, doing a build, and updating staging
    # fix would be to read some artifact emitted by the build or staging workflow
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.identify.outputs.packages }}
    steps:

      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Identify packages to build
        id: identify
        run: |
          packages=$(jq -c '
            to_entries
            | map(select(.value | test("-[a-f0-9]{7}$")))
            | from_entries
          ' .release-please-manifest.json)

          echo "Packages with git hash suffixes: $packages"
          echo "packages=$packages" >> $GITHUB_OUTPUT

  promote-api:
    name: Promote API container
    runs-on: ubuntu-latest
    needs: identify-builds
    if: ${{ fromJSON(needs.identify-builds.outputs.packages).api != '' }}
    steps:

      - name: Identify prerelease and release versions
        id: versions
        env:
          PRERELEASE: ${{ fromJSON(needs.identify-builds.outputs.packages).api }}
        run: |
          prerelease=${PRERELEASE}
          release=${PRERELEASE%-*}

          echo "Prerelease: $prerelease"
          echo "Release: $release"
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
          echo "release=$release" >> $GITHUB_OUTPUT

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Standardize Docker Tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.versions.outputs.prerelease }}
            type=semver,pattern={{version}},value=v${{ steps.versions.outputs.release }}

      - name: Promote API container
        run: |
          prerelease=$(echo "${{ steps.meta.outputs.tags }}" | sed -n 1p)
          release=$(echo "${{ steps.meta.outputs.tags }}" | sed -n 2p)

          echo "Promoting ${prerelease} to ${release}"

          docker pull ${prerelease}
          docker tag ${prerelease} ${release}
          docker push $${release}

  update-branches:
    needs:
      - promote-api
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch:
          - staging
          - production
    steps:

      - name: Checkout ${{ matrix.branch }} branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}

      - name: Override merge from PR branch
        uses: ./.github/actions/git-override-merge
        with:
          source-branch: ${{ github.ref }}

      - name: Push override commit
        run: |
          git push origin ${{ matrix.branch }}:${{ matrix.branch }}
