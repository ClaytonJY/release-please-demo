name: Deploy to Dev

on:
  workflow_dispatch

permissions:
  contents: write
  pull-requests: write

  # need a lot to edit PRs to remove label
  # see https://github.com/cli/cli/issues/6274#issuecomment-2439692639
  checks: read
  statuses: read
  actions: read
  repository-projects: read

jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the development branch
        uses: actions/checkout@v4
        with:
          ref: development

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Merge head branch into development
        run: |
          # we want a new merge commit with
          # - two parents: development and feature branch tips
          # - file state identical to tip of feature branch

          git fetch origin ${{ github.ref_name }}:${{ github.ref_name }}

          git merge -s ours --no-commit ${{ github.ref_name }}
          git checkout ${{ github.ref_name }} -- .
          git commit -m "ci: Merge branch '${{ github.ref_name }}' into development"

      - name: Determine new version tag
        run: |
          # create a "post-release" by appending short commit SHA to existing version
          HEAD_VERSION="$(jq -r '.["."]' .release-please-manifest.json)"
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "VERSION=${HEAD_VERSION}-${SHORT_SHA}" >> "${GITHUB_ENV}"

      - name: Force new version tag
        run: |
          git commit --allow-empty -m "ci: release ${VERSION}" -m "Release-As: ${VERSION}"
          git push

      - name: Create release PR to development branch
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          # need a PAT to trigger checks from release-please PRs
          # see https://github.com/googleapis/release-please-action?tab=readme-ov-file#github-credentials
          token: ${{ secrets.RELEASE_PLEASE_PAT }}
          target-branch: development
          skip-github-release: true

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.release-please.outputs.pr).headBranchName }}

      - name: Setup `uv`
        uses: astral-sh/setup-uv@v5

      - name: Update `pyproject.toml` and `uv.lock` with valid versions
        run: |
          # PEP440 doesn't allow dash suffixes, so we replace with plus
          sed -E -i 's/(^version *= *"[^"]*)-/\1+/' pyproject.toml
          git add pyproject.toml

          uv lock
          git add uv.lock

          git commit -m "ci: correct versions in `pyproject.toml` and `uv.lock`"
          git push

      - name: Auto-merge release PR after checks pass
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # merge command tends to fail first try
          # see https://github.com/cli/cli/issues/8092#issuecomment-1743904069
          for i in {1..3}; do
            if gh pr merge ${{ fromJson(steps.release-please.outputs.pr).number }} \
              --repo "${{ github.repository }}" \
              --squash \
              --auto \
              --delete-branch; then
              # if success, break out of loop
              break
            else
              if [[ $i -eq 3 ]]; then
                echo "Failed to merge PR after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      # because we won't be releasing this PR, remove the "autorelease: pending" label
      # this label prevents release-please from creating subsequent PRs
      # TODO: do this first? put it in a loop?
      - name: Remove autorelease label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit ${{ fromJson(steps.release-please.outputs.pr).number }} \
            --repo "${{ github.repository }}" \
            --remove-label "autorelease: pending"
