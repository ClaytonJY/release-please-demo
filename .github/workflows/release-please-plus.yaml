name: release-please with uv compatibility, helm awareness, and optional auto-merging

on:
  workflow_call:
    inputs:
      target-branch:
        description: |
          Branch to release.
          Default is `main`; other branches will automerge the release PR and skip making a GitHub Release."
        type: string
        required: false
        default: "main"
    secrets:
      pat:
        description: "A personal access token that can create commits and PRs"
        required: true
    outputs:
      pr:
        description: "JSON pull-request object from release-please"
        value: ${{ jobs.release-please.outputs.pr }}


permissions:
  contents: write
  pull-requests: write

  # need a lot of unusual permissions to remove label from a PR
  # see https://github.com/cli/cli/issues/6274#issuecomment-2439692639
  checks: read
  statuses: read
  actions: read
  repository-projects: read

jobs:
  release-please:
    name: Create release PR with release-please
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.release-please.outputs.pr }}
    steps:
      - name: Create release PR on ${{ inputs.target-branch }}
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.pat }}
          target-branch: ${{ inputs.target-branch }}
          skip-github-release: ${{ inputs.target-branch != 'main' }}

  update-release-pr:
    name: Update Release PR
    # Various updates are needed on release PRs to account for our tooling/approach
    runs-on: ubuntu-latest
    needs: release-please
    # skip this job if the release-please PR wasn't created nor updated
    if: needs.release-please.outputs.pr != ''
    env:
      RELEASE_BRANCH: ${{ fromJson(needs.release-please.outputs.pr).headBranchName }}
      PR_NUMBER: ${{ fromJson(needs.release-please.outputs.pr).number }}
    steps:
      - name: Checkout release branch ${{ env.RELEASE_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          token: ${{ secrets.pat }}  # must use PAT to trigger workflows from commits

      - name: Determine which packages changed
        id: check
        run: |
          # fetch old manifest directly from target branch
          git fetch --no-tags --prune --depth=1 origin ${{ inputs.target-branch }}
          old_manifest="$(git show origin/${{ inputs.target-branch }}:.release-please-manifest.json || echo '{}')"

          new_manifest="$(cat .release-please-manifest.json)"

          # build an object of bumped packages with their version, e.g.
          #    {
          #      "some-package": "1.2.3",
          #      "another-package": "4.5.6"
          #    }
          changed_packages="$(jq --argjson old "$old_manifest" --argjson new "$new_manifest" -c -n '
            $new | with_entries(select(.value != ($old[.key])))
          ')"

          echo "Changed packages: $changed_packages"
          echo "changed-packages=$changed_packages" >> "$GITHUB_OUTPUT"

      - name: Determine if Helm chart needs a patch bump
        id: bump
        run: |
          helm_bumped="$(echo '${{ steps.check.outputs.changed-packages }}' | jq 'has("helm")')"
          non_helm_bumped="$(echo '${{ steps.check.outputs.changed-packages }}' | jq '[keys[] | select(. != "helm")] | length > 0')"

          if [[ "$helm_bumped" == "false" && "$non_helm_bumped" == "true" ]]; then
            bump_helm=true
          else
            bump_helm=false
          fi

          echo "bump-helm=$bump_helm" >> "$GITHUB_OUTPUT"

      - name: Bump helm chart patch version
        if: ${{ steps.bump.outputs.bump-helm == 'true' }}
        run: |
          current_version=$(jq -r '.["helm"]' .release-please-manifest.json)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$current_version"
          new_version="${MAJOR}.${MINOR}.$((PATCH + 1))"

          jq --arg new "$new_version" '.["helm"] = $new' \
            .release-please-manifest.json > tmp && mv tmp .release-please-manifest.json

          sed -i "s/^version: .*/version: $new_version/" helm/Chart.yaml

          echo "Helm package version updated to $new_version"

      # TODO: use mise instead
      - name: Setup `uv`
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.23"

      - name: Fix pyproject version
        # PEP440 disallows dash-suffixes, so we replace with plus (1.2.3-abcd123 -> 1.2.3+abcd123)
        # no-op for release versions (1.2.3 -> 1.2.3)
        run: |
          sed -E -i 's/(^version *= *"[^"]*)-/\1+/' api/pyproject.toml
          uv lock --directory api

      - name: Fix tag references in helm chart
        run: |
          # TODO: use toml-cli or python
          VERSION=$(grep '^version\s*=' api/pyproject.toml | cut -d '"' -f2)

          # TODO: use yq instead
          sed -i "s/^\(  api:\).*/\1 ${VERSION}/" helm/values.yaml

      - name: Configure git user
        uses: ./.github/actions/git-config-user

      - name: Commit and push any changed files
        run: |
          git add -u
          if ! git diff-index --cached --quiet HEAD; then
            git commit -m "ci: post-release-please updates"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Add helm chart release to PR body
        if: ${{ steps.bump.outputs.bump-helm == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_body=$(gh pr view ${{ env.PR_NUMBER }} --json body -q .body)

          # thanks, chatGPT
          # TODO: dumb down
          header=$(echo "$pr_body" | awk -v RS='\n---\n' 'NR==1 {print $0}')
          content=$(echo "$pr_body" | awk -v RS='\n---\n' 'NR==2 {print $0}')
          footer=$(echo "$pr_body" | awk -v RS='\n---\n' 'NR==3 {print $0}')

          date=$(echo "$content" | sed -En 's/^##.+\(([0-9-]+)\)/\1/p')

          # TODO: deduplicate with above
          git fetch --no-tags --prune --depth=1 origin ${{ inputs.target-branch }}
          old_manifest="$(git show origin/${{ inputs.target-branch }}:.release-please-manifest.json || echo '{}')"

          old_version=$(echo "$old_manifest" | jq -r '.["helm"]')
          new_version=$(cat .release-please-manifest.json | jq -r '.["helm"]')

          head_hash=$(git rev-parse HEAD)

          api_version=$(cat .release-please-manifest.json | jq -r '.["api"]')

          helm_release_notes=$(cat <<-EOF
          <details><summary>chart: $new_version</summary>

          ## [$new_version](https://github.com/ClaytonJY/release-please-demo/compare/api-v$old_version...api-v$new_version) ($date)


          ### Bug Fixes

          * update api component to version $api_version ([${head_hash::7}](https://github.com/ClaytonJY/release-please-demo/commit/$head_hash))
          </details>
          EOF
          )

          # command substitution strips trailing newlines so we add a few back
          updated_body=$(printf "%s\n---\n%s\n\n%s\n\n---\n%s" "$header" "$content" "$helm_release_notes" "$footer")

          gh pr edit ${{ env.PR_NUMBER }} --body "$updated_body"

  # automerge-release-pr:
  #   name: Auto-merge release PR after checks pass
  #   # used when releasing to a non-main environment branch like `staging` or `production`
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release-please
  #     - update-release-pr
  #   if: ${{ inputs.target-branch != 'main'}}
  #   env:
  #     PR_NUMBER: ${{ fromJson(needs.release-please.outputs.pr).number }}
  #   steps:
  #     - name: Remove autorelease label from release PR
  #       # if we aren't going to release this PR, remove the "autorelease: pending" label
  #       # as it will cause issues otherwise
  #       run: |
  #         gh pr edit ${{ env.PR_NUMBER }} \
  #           --repo "${{ github.repository }}" \
  #           --remove-label "autorelease: pending"

  #     - name: Auto-merge release PR after checks pass
  #       # github pr edits tend to fail initially, so we try a few times in a loop
  #       # see https://github.com/cli/cli/issues/8092#issuecomment-1743904069
  #       run: |
  #         for in in {1..5}; do
  #            if gh pr merge ${{ env.PR_NUMBER }} \
  #             --repo "${{ github.repository }}" \
  #             --squash \
  #             --auto \
  #             --delete-branch; then
  #             break
  #           else
  #             if [[ $i -eq 5 ]]; then
  #               echo "Failed to edit release PR after 5 attempts"
  #               exit 1
  #             fi
  #             sleep 3
  #           fi
  #         done
