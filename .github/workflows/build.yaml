name: Build for an Environment-specific Branch

on:
  # update staging from release PRs
  pull_request:
    branches:
      - main
    paths:
      - .release-please-manifest.json
  # update development from manual workflows
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  build-branch:
    name: Create a build branch with updated versions
    runs-on: ubuntu-latest
    outputs:
      build-branch: ${{ steps.build-branch.outputs.build-branch }}
      env-branch: ${{ steps.env-branch.outputs.env-branch }}
    steps:
      - name: Determine env branch
        id: env-branch
        run: |
          if [[ "${{ github.event_name }}" = "pull_request" ]]; then
            env_branch="env/staging"
          elif [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
            env_branch="env/development"
          else
            echo "Unexpected event: ${{ github.event_name }}"
            exit 1
          fi

          echo "Selected env branch $env_branch"
          echo "env-branch=${env_branch}" >> $GITHUB_OUTPUT

      - name: Checkout env branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.env-branch.outputs.env-branch }}

      - name: Override merge from source ref
        uses: ./.github/actions/git-override-merge
        with:
          source-branch: ${{ github.ref }}

      - name: Add git suffix to versions
        # only handles api package!
        run: |
          api_version=$(jq -r '.api' .release-please-manifest.json)
          short_sha=${GITHUB_SHA:0:7}
          new_api_version="${api_version}-${short_sha}"

          sed -i "s/^\(  api:\).*/\1 ${new_api_version}/" helm/values.yaml

          jq --arg new "$new_api_version" '.["api"] = $new' \
            .release-please-manifest.json > tmp && mv tmp .release-please-manifest.json

          echo "api changed to $new_api_version in helm/values.yaml and .release-please-manifest.json; committing"

      - name: Commit & push changes to build branch
        id: build-branch
        run: |
          git add helm/values.yaml .release-please-manifest.json
          git commit -m "ci: Update versions as needed"

          build_branch="build/${{ github.sha }}"

          git push origin HEAD:${build_branch}

          echo "created build branch ${build_branch}"
          echo "build-branch=${build_branch}" >> $GITHUB_OUTPUT

  select-packages:
    name: Select which components to build
    needs: build-branch
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.select.outputs.packages }}
    steps:
      - name: Checkout build branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-branch.outputs.build-branch }}
      - name: Select packages to build
        # select anything with a commit-hash suffix
        id: select
        run: |
          packages=$(jq -c '
            to_entries
            | map(select(.value | test("-[a-f0-9]{7}$")))
            | .[].key
          ' .release-please-manifest.json)

          echo "Packages to build: $packages"
          echo "packages=$packages" >> $GITHUB_OUTPUT

  ## CUSTOMIZE AS NEEEDED ##

  build-api:
    name: Build API package
    needs:
      - build-branch
      - select-packages
    if: ${{ contains(fromJSON(needs.select-packages.outputs.packages), 'api') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout build branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-branch.outputs.build-branch }}

      - name: Extract version from release-please manifest
        id: version
        run: |
          version=$(jq -r '.["api"]' .release-please-manifest.json)
          echo "version=${version}" >> "${GITHUB_OUTPUT}"

      - name: Standardize docker tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.version.outputs.version }}

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          context: api
          tags: ${{ steps.meta.outputs.tags }}
          push: true

  # add other build jobs here to run them in parallel

  ## END CUSTOMIZATION ##

  update-env-branch:
    name: Update environment branch
    needs:
      - build-branch
      # include all build steps here
      - build-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout build branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-branch.outputs.build-branch }}
          fetch-depth: 0 # get all branches, including env branch and common history

      - name: Push changes to environment branch
        run: |
          git push origin HEAD:${{ needs.build-branch.outputs.env-branch }}

  cleanup-build-branch:
    name: Cleanup build branch
    needs:
      - build-branch
      - update-env-branch
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout build branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-branch.outputs.build-branch }}
      - name: Delete build branch from GitHub
        run: git push origin --delete ${{ needs.build-branch.outputs.build-branch }} || true
