name: Release, Please!

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    # create or update a release PR on main
    # this will be a no-op if version doesn't need bumping
    name: Create Release PR
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.release-please.outputs.pr }}
    steps:
      - name: Create PR with release-please
        id: release-please
        uses: googleapis/release-please-action@v4
        # with:
          # will need a PAT to trigger checks from release-please PRs
          # https://github.com/googleapis/release-please-action?tab=readme-ov-file#github-credentials
          # token: ${{ secrets.MY_RELEASE_PLEASE_TOKEN }}

  update-release-pr:
    # release-please can't update uv.lock, so we do it ourselves
    # this won't run if create-release-pr was a no-op
    name: Update Release PR
    needs: create-release-pr
    if: needs.create-release-pr.outputs.pr != ''
    runs-on: ubuntu-latest
    env:
      RELEASE_BRANCH: ${{ fromJson(needs.create-release-pr.outputs.pr).headBranchName }}
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup `uv`
        uses: astral-sh/setup-uv@v5

      - name: Update `uv.lock`
        run: |
          uv lock
          git add uv.lock
          git commit -m "ci: update uv.lock"
          git push

  update-staging:
    name: Update staging branch to match release PR, plus version override
    needs:
      - create-release-pr
      - update-release-pr
    runs-on: ubuntu-latest
    env:
      RELEASE_BRANCH: ${{ fromJson(needs.create-release-pr.outputs.pr).headBranchName }}
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Merge release branch into staging branch
        run: |
          # we want a new merge commit with
          # - two parents: staging and release branch tips
          # - file state identical to tip of release branch
          #
          # release-please prefers squash merges, but Release-As commits should save us

          get fetch origin ${{ env.RELEASE_BRANCH }}:${{ env.RELEASE_BRANCH }}
          git merge -s ours --no-commit --allow-unrelated-histories ${{ env.RELEASE_BRANCH }}
          git checkout ${{ env.RELEASE_BRANCH }} -- .
          git commit -m "ci: Merge branch '${{ env.RELEASE_BRANCH }}' into staging"

      - name: Determine new version tag
        run: |
          # create a "pre-release" by appending short commit SHA to version from release branch
          # the GITHUB_SHA is the tip of main (not staging or release branch)
          HEAD_VERSION="$(jq -r '.["."]' .release-please-manifest.json)"
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "VERSION=${HEAD_VERSION}-${SHORT_SHA}" >> "${GITHUB_ENV}"

      - name: Force new version tag & push
        run: |
          git commit --allow-empty -m "ci: release ${VERSION}" -m "Release-As: ${VERSION}"
          git push

      - name: Create release PR to staging branch
        id: release-please-staging
        uses: googleapis/release-please-action@v4
        with:
          # need a PAT to trigger checks from release-please PRs
          # see https://github.com/googleapis/release-please-action?tab=readme-ov-file#github-credentials
          token: ${{ secrets.RELEASE_PLEASE_PAT }}
          target-branch: staging
          skip-github-release: true

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.release-please-staging.outputs.pr).headBranchName }}

      - name: Setup `uv`
        uses: astral-sh/setup-uv@v5

      - name: Update `pyproject.toml` and `uv.lock` with valid versions
        run: |
          # PEP440 doesn't allow dash suffixes, so we replace with plus
          sed -E -i 's/(^version *= *"[^"]*)-/\1+/' pyproject.toml
          git add pyproject.toml

          uv lock
          git add uv.lock

          git commit -m "ci: correct versions in `pyproject.toml` and `uv.lock`"
          git push

      # TODO: loop?
      - name: Remove autorelease label from release PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit ${{ fromJson(steps.release-please-staging.outputs.pr).number }} \
            --repo "${{ github.repository }}" \
            --remove-label "autorelease: pending"

      - name: Auto-merge release PR after checks pass
        run: |
          gh pr merge ${{ fromJson(steps.release-please-staging.outputs.pr).number }} \
            --repo "${{ github.repository }}" \
            --squash \
            --auto \
            --delete-branch
